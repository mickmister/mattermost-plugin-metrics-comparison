// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-metrics-comparison/server/prometheus (interfaces: PrometheusClient)

// Package mock_prometheus is a generated GoMock package.
package mock_prometheus

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/mattermost/mattermost-plugin-metrics-comparison/server/prometheus"
)

// MockPrometheusClient is a mock of PrometheusClient interface.
type MockPrometheusClient struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusClientMockRecorder
}

// MockPrometheusClientMockRecorder is the mock recorder for MockPrometheusClient.
type MockPrometheusClientMockRecorder struct {
	mock *MockPrometheusClient
}

// NewMockPrometheusClient creates a new mock instance.
func NewMockPrometheusClient(ctrl *gomock.Controller) *MockPrometheusClient {
	mock := &MockPrometheusClient{ctrl: ctrl}
	mock.recorder = &MockPrometheusClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusClient) EXPECT() *MockPrometheusClientMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockPrometheusClient) Query(arg0 string) (*prometheus.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0)
	ret0, _ := ret[0].(*prometheus.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockPrometheusClientMockRecorder) Query(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPrometheusClient)(nil).Query), arg0)
}

// QueryAPIHandlerAverage mocks base method.
func (m *MockPrometheusClient) QueryAPIHandlerAverage(arg0, arg1 string) (*prometheus.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAPIHandlerAverage", arg0, arg1)
	ret0, _ := ret[0].(*prometheus.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAPIHandlerAverage indicates an expected call of QueryAPIHandlerAverage.
func (mr *MockPrometheusClientMockRecorder) QueryAPIHandlerAverage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAPIHandlerAverage", reflect.TypeOf((*MockPrometheusClient)(nil).QueryAPIHandlerAverage), arg0, arg1)
}

// QueryAPIHandlerCount mocks base method.
func (m *MockPrometheusClient) QueryAPIHandlerCount(arg0, arg1 string) (*prometheus.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAPIHandlerCount", arg0, arg1)
	ret0, _ := ret[0].(*prometheus.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAPIHandlerCount indicates an expected call of QueryAPIHandlerCount.
func (mr *MockPrometheusClientMockRecorder) QueryAPIHandlerCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAPIHandlerCount", reflect.TypeOf((*MockPrometheusClient)(nil).QueryAPIHandlerCount), arg0, arg1)
}

// QueryAPIHandlerTotalTime mocks base method.
func (m *MockPrometheusClient) QueryAPIHandlerTotalTime(arg0, arg1 string) (*prometheus.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAPIHandlerTotalTime", arg0, arg1)
	ret0, _ := ret[0].(*prometheus.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAPIHandlerTotalTime indicates an expected call of QueryAPIHandlerTotalTime.
func (mr *MockPrometheusClientMockRecorder) QueryAPIHandlerTotalTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAPIHandlerTotalTime", reflect.TypeOf((*MockPrometheusClient)(nil).QueryAPIHandlerTotalTime), arg0, arg1)
}

// QueryDBStoreAverage mocks base method.
func (m *MockPrometheusClient) QueryDBStoreAverage(arg0, arg1 string) (*prometheus.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDBStoreAverage", arg0, arg1)
	ret0, _ := ret[0].(*prometheus.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDBStoreAverage indicates an expected call of QueryDBStoreAverage.
func (mr *MockPrometheusClientMockRecorder) QueryDBStoreAverage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDBStoreAverage", reflect.TypeOf((*MockPrometheusClient)(nil).QueryDBStoreAverage), arg0, arg1)
}

// QueryDBStoreCount mocks base method.
func (m *MockPrometheusClient) QueryDBStoreCount(arg0, arg1 string) (*prometheus.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDBStoreCount", arg0, arg1)
	ret0, _ := ret[0].(*prometheus.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDBStoreCount indicates an expected call of QueryDBStoreCount.
func (mr *MockPrometheusClientMockRecorder) QueryDBStoreCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDBStoreCount", reflect.TypeOf((*MockPrometheusClient)(nil).QueryDBStoreCount), arg0, arg1)
}

// QueryDBStoreTotalTime mocks base method.
func (m *MockPrometheusClient) QueryDBStoreTotalTime(arg0, arg1 string) (*prometheus.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDBStoreTotalTime", arg0, arg1)
	ret0, _ := ret[0].(*prometheus.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDBStoreTotalTime indicates an expected call of QueryDBStoreTotalTime.
func (mr *MockPrometheusClientMockRecorder) QueryDBStoreTotalTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDBStoreTotalTime", reflect.TypeOf((*MockPrometheusClient)(nil).QueryDBStoreTotalTime), arg0, arg1)
}
